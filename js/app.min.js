"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
document.addEventListener('DOMContentLoaded', function () {
  // height 100vh fix for IOS
  var vh = window.innerHeight * 0.01;
  document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));

  // resize
  window.addEventListener('resize', function () {
    var vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
  });

  // checker
  var useItemChecker = function useItemChecker(els, onClickOutside) {
    var checkBodyClick = function checkBodyClick(e) {
      var currentEl = e.target;
      while (currentEl) {
        if (els.includes(currentEl)) break;
        currentEl = currentEl.parentNode;
      }
      if (!currentEl) {
        onClickOutside();
        removeBodyChecker();
      }
    };
    function setBodyChecker() {
      document.documentElement.addEventListener('click', checkBodyClick);
    }
    function removeBodyChecker() {
      document.documentElement.removeEventListener('click', checkBodyClick);
    }
    return {
      setBodyChecker: setBodyChecker,
      removeBodyChecker: removeBodyChecker
    };
  };

  // smooth scroll
  function currentYPosition() {
    // Firefox, Chrome, Opera, Safari
    if (self.pageYOffset) return self.pageYOffset;

    // Internet Explorer 6 - standards mode
    if (document.documentElement && document.documentElement.scrollTop) return document.documentElement.scrollTop;

    // Internet Explorer 6, 7 and 8
    if (document.body.scrollTop) return document.body.scrollTop;
    return 0;
  }
  function elmYPosition(eID) {
    var elm = document.getElementById(eID);
    var y = elm.offsetTop;
    var node = elm;
    while (node.offsetParent && node.offsetParent != document.body) {
      node = node.offsetParent;
      y += node.offsetTop;
    }
    return y;
  }
  function smoothScroll(eID) {
    var startY = currentYPosition();
    var stopY = document.getElementById('header') ? elmYPosition(eID) - header.getBoundingClientRect().height - Number(20) : elmYPosition(eID) - Number(20);
    var distance = stopY > startY ? stopY - startY : startY - stopY;
    if (distance < 100) {
      scrollTo(0, stopY);
      return;
    }
    var speed = Math.round(distance / 100);
    if (speed >= 20) speed = 20;
    var step = Math.round(distance / 25);
    var leapY = stopY > startY ? startY + step : startY - step;
    var timer = 0;
    if (stopY > startY) {
      for (var i = startY; i < stopY; i += step) {
        setTimeout('window.scrollTo(0, ' + leapY + ')', timer * speed);
        leapY += step;
        if (leapY > stopY) leapY = stopY;
        timer++;
      }
      return;
    }
    for (var _i = startY; _i > stopY; _i -= step) {
      setTimeout('window.scrollTo(0, ' + leapY + ')', timer * speed);
      leapY -= step;
      if (leapY < stopY) leapY = stopY;
      timer++;
    }
  }

  // smooth scroll on all links
  var allLinks = document.querySelectorAll('a[href^="#"]');
  if (allLinks) {
    allLinks.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (item.getAttribute('href').length > 1) {
          smoothScroll(item.getAttribute('href').slice(1));
        }
      });
    });
  }

  // slides up/down/toggle
  var slideUpQna = function slideUpQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    target.style.transitionProperty = 'height, margin, padding';
    target.style.transitionDuration = duration + 'ms';
    target.style.height = target.offsetHeight + 'px';
    target.offsetHeight;
    target.style.overflow = 'hidden';
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    target.previousElementSibling.style.pointerEvents = 'none';
    window.setTimeout(function () {
      target.style.display = 'none';
      target.style.removeProperty('height');
      target.style.removeProperty('padding-top');
      target.style.removeProperty('padding-bottom');
      target.style.removeProperty('margin-top');
      target.style.removeProperty('margin-bottom');
      target.style.removeProperty('overflow');
      target.style.removeProperty('transition-duration');
      target.style.removeProperty('transition-property');
      target.previousElementSibling.style.pointerEvents = 'auto';
    }, duration);
    target.parentNode.classList.remove('is--open');
  };
  var slideDownQna = function slideDownQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    target.style.removeProperty('display');
    var display = window.getComputedStyle(target).display;
    if (display === 'none') display = 'block';
    target.style.display = display;
    var height = target.offsetHeight;
    target.style.overflow = 'hidden';
    target.style.height = 0;
    target.style.paddingTop = 0;
    target.style.paddingBottom = 0;
    target.style.marginTop = 0;
    target.style.marginBottom = 0;
    target.offsetHeight;
    target.style.transitionProperty = "height, margin, padding";
    target.style.transitionDuration = duration + 'ms';
    target.style.height = height + 'px';
    target.style.removeProperty('padding-top');
    target.style.removeProperty('padding-bottom');
    target.style.removeProperty('margin-top');
    target.style.removeProperty('margin-bottom');
    target.previousElementSibling.style.pointerEvents = 'none';
    window.setTimeout(function () {
      target.style.removeProperty('height');
      target.style.removeProperty('overflow');
      target.style.removeProperty('transition-duration');
      target.style.removeProperty('transition-property');
      target.previousElementSibling.style.pointerEvents = 'auto';
    }, duration);
    target.parentNode.classList.add('is--open');
  };
  var slideToggleQna = function slideToggleQna(target) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;
    if (window.getComputedStyle(target).display === 'none') {
      return slideDownQna(target, duration);
    } else {
      return slideUpQna(target, duration);
    }
  };

  // accordeon
  var accordeonTrigger = document.querySelectorAll('.c-accordeon__trigger');
  if (accordeonTrigger) {
    accordeonTrigger.forEach(function (item) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        if (!item.parentNode.classList.contains('is--open')) {
          document.querySelectorAll('.c-accordeon__trigger').forEach(function (child) {
            if (child.parentNode.classList.contains('is--open')) {
              slideUpQna(child.nextElementSibling);
            }
          });
          slideDownQna(item.nextElementSibling);
        } else {
          slideUpQna(item.nextElementSibling);
        }
      });
    });
  }

  // special projects slider
  var specialProjectsSlider = document.querySelector('.special-projects__slider .swiper');
  if (specialProjectsSlider) {
    var mySpecialProjectsSlider = new Swiper(specialProjectsSlider, {
      slidesPerView: 1,
      spaceBetween: 24,
      loop: true,
      navigation: {
        prevEl: '.special-projects__slider .swiper-button-prev',
        nextEl: '.special-projects__slider .swiper-button-next'
      },
      pagination: {
        el: '.swiper-pagination',
        type: 'bullets',
        clickable: true
      }
    });
  }

  // contacts slider
  var contactsSlider = document.querySelector('.contacts__slider .swiper');
  if (contactsSlider) {
    var myContactsSlider = new Swiper(contactsSlider, {
      slidesPerView: 4,
      spaceBetween: 24,
      loop: true,
      navigation: {
        prevEl: '.contacts__slider .swiper-button-prev',
        nextEl: '.contacts__slider .swiper-button-next'
      },
      breakpoints: {
        0: {
          slidesPerView: 'auto'
        },
        1024: {
          slidesPerView: 3
        },
        1200: {
          slidesPerView: 4
        }
      }
    });
  }

  // mobile menu
  var header = document.getElementById('header');
  var hamburger = document.getElementById('hamburger-toggle');
  var mobileMenu = document.getElementById('mobile-menu');
  var mobileMenuLink = document.querySelectorAll('.mobile-menu__nav .nav__link');
  if (hamburger && mobileMenu) {
    hamburger.addEventListener('click', function (event) {
      event.preventDefault();
      if (!header.classList.contains('is--open')) {
        hamburger.disabled = true;
        hamburger.classList.add('hamburger--active');
        header.classList.add('is--open');
        document.body.classList.add('scroll-disabled');
        setTimeout(function () {
          hamburger.disabled = false;
          mobileMenu.classList.add('is--open');
        }, 300);
      } else {
        hamburger.classList.remove('hamburger--active');
        header.classList.remove('is--open');
        mobileMenu.classList.remove('is--open');
        document.body.classList.remove('scroll-disabled');
      }
    });
  }
  if (mobileMenuLink) {
    mobileMenuLink.forEach(function (item) {
      item.addEventListener('click', function () {
        if (header.classList.contains('is--open')) {
          hamburger.classList.remove('hamburger--active');
          header.classList.remove('is--open');
          mobileMenu.classList.remove('is--open');
          document.body.classList.remove('scroll-disabled');
        }
      });
    });
  }

  // tabs
  var tabsItems = document.querySelectorAll('.tabs__item');
  if (tabsItems) {
    tabsItems.forEach(function (item, i) {
      item.addEventListener('click', function () {
        var parent = item.closest('.tabs');
        parent.querySelectorAll('.tabs__item').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        parent.querySelectorAll('.tabs__wrapper').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        item.classList.add('is--active');
        var el = parent.querySelector('.is--active');
        var index = _toConsumableArray(parent.querySelectorAll('.tabs__item')).indexOf(el);
        parent.querySelectorAll('.tabs__wrapper')[index].classList.add('is--active');
      });
    });
  }

  // scroll    
  var prevScrollpos = window.pageYOffset;
  if (window.pageYOffset <= header.getBoundingClientRect().height / 2) {
    header.classList.remove('header--fixed');
  } else {
    header.classList.add('header--fixed');
  }
  function headerFixedUp() {
    if (window.pageYOffset <= header.getBoundingClientRect().height / 2) {
      header.classList.remove('header--fixed');
    } else {
      header.classList.add('header--fixed');
    }
  }
  function headerFixedDown() {
    if (window.pageYOffset <= header.getBoundingClientRect().height / 2) {
      header.classList.remove('header--fixed');
    } else {
      header.classList.add('header--fixed');
    }
  }
  window.addEventListener('scroll', function () {
    var currentScrollPos = window.pageYOffset;
    if (prevScrollpos > currentScrollPos || prevScrollpos <= 0) {
      // if up
      if (header) {
        headerFixedUp();
      }
    } else {
      // if down
      if (header) {
        headerFixedDown();
      }
    }
    prevScrollpos = currentScrollPos;
  });

  // modal
  var modal = document.querySelectorAll('.modal');
  var modalBtn = document.querySelectorAll('.modal-btn');
  var modalClose = document.querySelectorAll('.modal__close');
  var modalOverlay = document.querySelectorAll('.modal__overlay');
  if (modal && modalBtn && modalClose && modalOverlay) {
    // modal btn
    modalBtn.forEach(function (item, i) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        var modalID = item.dataset.id;
        document.querySelectorAll('.modal.modal--active').forEach(function (child) {
          return child.classList.remove('modal--active');
        });
        document.getElementById(modalID).classList.add('modal--active');
        document.body.classList.add('scroll-disabled');
      });
    });

    // modal close
    modalClose.forEach(function (item) {
      item.addEventListener('click', function () {
        document.querySelectorAll('.modal.modal--active').forEach(function (child) {
          return child.classList.remove('modal--active');
        });
        document.body.classList.remove('scroll-disabled');
      });
    });

    // modal overlay
    modalOverlay.forEach(function (item) {
      item.addEventListener('click', function () {
        document.querySelectorAll('.modal.modal--active').forEach(function (child) {
          return child.classList.remove('modal--active');
        });
        document.body.classList.remove('scroll-disabled');
      });
    });
  }

  // player
  var audioPlayer = document.querySelector('.player');
  var audioPlayerTimeline = document.querySelector('.player__timeline');
  var audioPlayerProgressBar = document.querySelector('.player__progress');
  var audioPlayerTrackName = document.querySelector('.player__title');
  var audioPlayerTrackHelp = document.querySelector('.player__help');
  var audioPlayerCurrentTime = document.querySelector('.plaer__value--current');
  var audioPlayerTotalTime = document.querySelector('.plaer__value--length');
  var audioPlayerBackBtn = document.querySelector('.player__control--back');
  var audioPlayerPlayBtn = document.querySelector('.player__control--play');
  var audioPlayerNextBtn = document.querySelector('.player__control--next');
  var audioPlayerReload = document.querySelector('.player__control--reload');
  var audioPlayerClose = document.querySelector('.player__close');
  // const mainPodcastsPlayer = document.querySelectorAll('.main-podcasts__play, .main-podcasts__player');
  var podcastsPlayer = document.querySelectorAll('.play-btn-audio');
  // const podcastsReleasePlayer = document.querySelectorAll('.c-listening');
  var currentAudio = document.getElementById("player-audio");
  var songsList = [];
  var indexAudio = 0;
  function createPlayList(selector) {
    var tracksArray = document.querySelectorAll(selector);
    songsList = [];
    for (var i = 0; i < tracksArray.length; i++) {
      var obj = {};
      obj.id = tracksArray[i].dataset.trackId;
      obj.name = tracksArray[i].dataset.trackName;
      obj.help = tracksArray[i].dataset.trackHelp;
      obj.track = tracksArray[i].dataset.trackSrc;
      songsList.push(obj);
    }
  }
  function getTimeCodeFromNum(num) {
    var seconds = parseInt(num);
    var minutes = parseInt(seconds / 60);
    seconds -= minutes * 60;
    var hours = parseInt(minutes / 60);
    minutes -= hours * 60;
    if (hours === 0) return "".concat(minutes, ":").concat(String(seconds % 60).padStart(2, 0));
    return "".concat(String(hours).padStart(2, 0), ":").concat(minutes, ":").concat(String(seconds % 60).padStart(2, 0));
  }
  function loadNewTrack(index) {
    var player = document.getElementById('source-audio');
    player.src = songsList[index].track;
    audioPlayerTrackName.textContent = songsList[index].name;
    audioPlayerTrackHelp.textContent = songsList[index].help;
    currentAudio.load();
    audioPlayerProgressBar.style.width = '0%';
    audioPlayerProgressBar.style.transition = 'none';
    toggleAudio();
    updateProgress();
    indexAudio = index;
    currentAudio.onloadedmetadata = function () {
      audioPlayerCurrentTime.textContent = getTimeCodeFromNum(currentAudio.currentTime);
      audioPlayerTotalTime.textContent = getTimeCodeFromNum(currentAudio.duration);
    }.bind(this);
  }
  function toggleAudio() {
    if (currentAudio.paused) {
      audioPlayerPlayBtn.classList.add('pause');
      currentAudio.play();
    } else {
      audioPlayerPlayBtn.classList.remove('pause');
      currentAudio.pause();
    }
  }
  function updateProgress() {
    setInterval(function () {
      audioPlayerProgressBar.style.width = currentAudio.currentTime / currentAudio.duration * 100 + '%';
      audioPlayerProgressBar.style.transition = 'all 0.2s linear';
      audioPlayerCurrentTime.textContent = getTimeCodeFromNum(currentAudio.currentTime);
    }, 500);
  }
  function changeProgress() {
    var timelineWidth = window.getComputedStyle(audioPlayerTimeline).width;
    var timeToSeek = event.offsetX / parseInt(timelineWidth) * currentAudio.duration;
    currentAudio.currentTime = timeToSeek;
  }
  function next() {
    if (indexAudio < songsList.length - 1) {
      var oldIndex = indexAudio;
      indexAudio++;
      loadNewTrack(indexAudio);
    }
  }
  function previous() {
    if (indexAudio > 0) {
      var oldIndex = indexAudio;
      indexAudio--;
      loadNewTrack(indexAudio);
    }
  }
  if (audioPlayerTimeline) {
    audioPlayerTimeline.addEventListener('click', function (event) {
      event.preventDefault();
      changeProgress();
    });
  }
  if (audioPlayerBackBtn) {
    audioPlayerBackBtn.addEventListener('click', function (event) {
      event.preventDefault();
      previous();
    });
  }
  if (audioPlayerPlayBtn) {
    audioPlayerPlayBtn.addEventListener('click', function (event) {
      event.preventDefault();
      toggleAudio();
    });
  }
  if (audioPlayerNextBtn) {
    audioPlayerNextBtn.addEventListener('click', function (event) {
      event.preventDefault();
      next();
    });
  }
  if (audioPlayerReload) {
    audioPlayerReload.addEventListener('click', function (event) {
      event.preventDefault();
      var timelineWidth = window.getComputedStyle(audioPlayerTimeline).width;
      var timeToSeek = Number(0);
      currentAudio.currentTime = timeToSeek;
    });
  }
  if (audioPlayerClose) {
    audioPlayerClose.addEventListener('click', function (event) {
      event.preventDefault();
      audioPlayerPlayBtn.classList.remove('pause');
      currentAudio.pause();
      if (!audioPlayer.classList.contains('player--hidden')) {
        audioPlayer.classList.add('player--hidden');
      }
    });
  }
  if (audioPlayer && podcastsPlayer) {
    podcastsPlayer.forEach(function (item, i) {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        createPlayList('.play-btn-audio');
        loadNewTrack(i);
        if (audioPlayer.classList.contains('player--hidden')) {
          audioPlayer.classList.remove('player--hidden');
        }
      });
    });
  }
});